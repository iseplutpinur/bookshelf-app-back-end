{
	"info": {
		"_postman_id": "a8c92ee6-2cb6-40e4-bb61-b9d92233ef45",
		"name": "Books API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11190770"
	},
	"item": [
		{
			"name": "Adding Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"   pm.response.to.have.status(201);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have bookId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('bookId', data.bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Buku A\",\r\n   \"categories\": [\"Android\", \"Web\"],\r\n   \"author\": \"Isep Lutpi Nur\",\r\n   \"publisher\": \"Publisher A\",\r\n   \"year\": 2019\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should be have 200 value\", () =>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should have a books array and contain at least 1 item', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('books');\r",
							"   pm.expect(data.books).to.be.an('array');\r",
							"   pm.expect(data.books).lengthOf.at.least(1);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specified Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should contain book object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('book');\r",
							"   pm.expect(data.book).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('note object should contain correct value for id, title, categories, author, publisher, and year property', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data: { book } } = responseJson;\r",
							" \r",
							"   const expectedId = pm.environment.get('bookId');\r",
							"   const expectedTitle = 'Buku A';\r",
							"   const expectedCategories = ['Android', 'Web'];\r",
							"   const expectedPublisher = 'Publisher A';\r",
							"   const expectedAuthor = 'Isep Lutpi Nur';\r",
							"   const expectedYear = 2019;\r",
							" \r",
							"   pm.expect(book).to.have.ownProperty('id');\r",
							"   pm.expect(book.id).to.equals(expectedId);\r",
							" \r",
							"   pm.expect(book).to.have.ownProperty('title');\r",
							"   pm.expect(book.title).to.equals(expectedTitle);\r",
							" \r",
							"   pm.expect(book).to.have.ownProperty('categories');\r",
							"   pm.expect(book.categories).to.eql(expectedCategories);\r",
							"\r",
							"   pm.expect(book).to.have.ownProperty('publisher');\r",
							"   pm.expect(book.publisher).to.eql(expectedPublisher);\r",
							"\r",
							"   pm.expect(book).to.have.ownProperty('author');\r",
							"   pm.expect(book.author).to.eql(expectedAuthor);\r",
							"\r",
							"   pm.expect(book).to.have.ownProperty('year');\r",
							"   pm.expect(book.year).to.eql(expectedYear);\r",
							"   pm.expect(book.year).to.be.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
							"}); \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Buku berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test('when request the updated book', () => {\r",
							"    const bookId = pm.environment.get('bookId');\r",
							"    pm.sendRequest(`http://localhost:8080/books/${bookId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated book should contain the latest data', () => {\r",
							"                const responseJson = pm.response.json();\r",
							"                const { data: { book } } = responseJson;\r",
							"                \r",
							"                const expectedId = pm.environment.get('bookId');\r",
							"                const expectedTitle = 'Buku A Revised';\r",
							"                const expectedCategories = ['Android', 'Web', 'Revised'];\r",
							"                const expectedPublisher = 'Publisher A Revised';\r",
							"                const expectedAuthor = 'Isep Lutpi Nur Revised';\r",
							"                const expectedYear = 2018;\r",
							"                \r",
							"                pm.expect(book).to.have.ownProperty('id');\r",
							"                pm.expect(book.id).to.equals(expectedId);\r",
							"                \r",
							"                pm.expect(book).to.have.ownProperty('title');\r",
							"                pm.expect(book.title).to.equals(expectedTitle);\r",
							"                \r",
							"                pm.expect(book).to.have.ownProperty('categories');\r",
							"                pm.expect(book.categories).to.eql(expectedCategories);\r",
							"\r",
							"                pm.expect(book).to.have.ownProperty('publisher');\r",
							"                pm.expect(book.publisher).to.eql(expectedPublisher);\r",
							"\r",
							"                pm.expect(book).to.have.ownProperty('author');\r",
							"                pm.expect(book.author).to.eql(expectedAuthor);\r",
							"\r",
							"                pm.expect(book).to.have.ownProperty('year');\r",
							"                pm.expect(book.year).to.eql(expectedYear);\r",
							"                pm.expect(book.year).to.be.a('number');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Buku A Revised\",\r\n   \"categories\": [\"Android\", \"Web\", \"Revised\"],\r\n   \"author\": \"Isep Lutpi Nur Revised\",\r\n   \"publisher\": \"Publisher A Revised\",\r\n   \"year\": 2018\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"}); \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"}); \r",
							"\r",
							"pm.test('when request the deleted book', () => {\r",
							"    const bookId = pm.environment.get('bookId');\r",
							"    pm.sendRequest(`http://localhost:8080/books/${bookId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('the deleted book should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Buku tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	]
}